!function(){"use strict";class e{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this._id=e._id,this._isLiked=e.isLiked||!1,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteConfirm=r,this._handleLikeClick=i}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this).then((e=>{this._isLiked=e,this.renderLikes(this._isLiked)}))})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteConfirm()})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}renderLikes(e){this._isLiked=e,e?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}getLikes(){return this._isLiked}removeCard(){this._cardElement.remove(),this._cardElement=null}getView(){return this._cardElement=this._getTemplate(),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._cardImageEl=this._cardElement.querySelector(".card__photo"),this.cardNameEl=this._cardElement.querySelector(".card__title"),this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name,this.cardNameEl.textContent=this._name,this.renderLikes(this._isLiked),this._setEventListeners(),this._cardElement}getId(){return this._id}}var t=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this._setEventListeners(),this._toggleButtonState()}_showError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._inputErrorClass)}_checkInputValidity(e){e.validity.valid?this._hideError(e):this._showError(e)}_toggleButtonState(){const e=this._hasInvalidInput(this._inputEls),t=this._inputEls.every((e=>""===e.value.trim()));e||t?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}_setEventListeners(){this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._inputEls.forEach((e=>{this._hideError(e)})),this.disableButton()}enableValidation(){this._setEventListeners()}reset(){this._form.reset()}};class s{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class r{constructor(e){let{popupSelector:t}=e;this._popup=document.querySelector(t),this._popupElement=document.querySelector(t),this._closeButton=this._popupElement.querySelector(".modal__close-button"),this._handleEscClose=this._handleEscClose.bind(this),this._handleOverlayClose=this._handleOverlayClose.bind(this)}_handleOverlayClose(e){e.target===this._popupElement&&this.close()}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){this._popupElement.classList.add("modal_is-opened"),document.addEventListener("keydown",this._handleEscClose),document.addEventListener("mousedown",this._handleOverlayClose)}close(){this._popupElement.classList.remove("modal_is-opened"),document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("click",this._handleOverlayClose)}setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()}))}}class i extends r{constructor(e,t){super({popupSelector:e}),this._handleFormSubmit=t,this._popupForm=this._popup.querySelector(".modal__form"),this._popupForm?(this._submitBtn=this._popupForm.querySelector(".modal__save-button, .confirm__modal-button"),this._submitBtn?(this._submitBtnText=this._submitBtn.textContent,this._inputList=Array.from(this._popupForm.querySelectorAll(".modal__input"))):console.error(`Submit button not found in form with selector: ${e}`)):console.error(`Form not found in popup with selector: ${e}`)}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitBtn&&(e?(this._submitBtn.textContent=t,this._submitBtn.disabled=!0):(this._submitBtn.textContent=this._submitBtnText,this._submitBtn.disabled=!1))}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setInputsValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}const n={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},o=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}initialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}postCards(e){let{name:t,link:s,_id:r}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s,_id:r})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}editUserInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then(this._checkResponse)}updateProfilePicture(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkResponse)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}unlikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"9a2a6717-e342-435d-a8a9-13aa291b9ad5","Content-Type":"application/json"}}),a=document.querySelector("#profile-edit-button"),l=document.querySelector("#profile-edit-modal").querySelector("#editProfileForm"),d=document.querySelector(".pencil-icon"),c=document.querySelector("#profile-picture-modal"),h=c.querySelector("#profile-picture-form"),u=(c.querySelector("#profile-picture-save"),new class{constructor(e,t,s){this._nameElement=document.querySelector(e),this._aboutElement=document.querySelector(t),this._avatarElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,about:this._aboutElement.textContent,avatar:this._avatarElement?this._avatarElement.src:null}}setUserInfo(e,t,s){this._nameElement.textContent=e,this._aboutElement.textContent=t,s&&this._avatarElement&&(this._avatarElement.src=s)}}(".profile__title",".profile__description",".profile__picture"));o.getUserInfo().then((e=>{u.setUserInfo(e.name,e.about,e.avatar)})).catch((e=>{console.error("Error fetching user info:",e)}));const _=new t(n,l);_.enableValidation(),a.addEventListener("click",(()=>{const e=u.getUserInfo();m.setInputsValues(e),m.open(),_.resetValidation()}));const m=new i("#profile-edit-modal",(function(e){m.renderLoading(!0),o.editUserInfo(e).then((e=>{u.setUserInfo(e.name,e.about,e.avatar),m.close(),l.reset(),_.disableButton()})).catch((e=>{console.error("Error updating profile:",e)})).finally((()=>{m.renderLoading(!1)}))}));m.setEventListeners();const p=new t(n,h);p.enableValidation(),d.addEventListener("click",(()=>{E.open(),p.resetValidation()}));const E=new i("#profile-picture-modal",(function(e){const t=e.newProfilePictureUrl;E.renderLoading(!0),o.updateProfilePicture(t).then((e=>{u.setUserInfo(e.name,e.about,e.avatar),E.close(),p.disableButton(),p.reset()})).catch((e=>{console.error("Error updating profile picture:",e)})).finally((()=>{E.renderLoading(!1)}))}));E.setEventListeners();const v=document.querySelector("#profile-card-modal"),b=document.querySelector(".profile__add-button"),f=v.querySelector("#newCardForm"),L=(v.querySelector("#card-save"),"#card-template"),k=new t(n,f);k.enableValidation(),b.addEventListener("click",(e=>{C.open(),k.resetValidation()}));const C=new i("#profile-card-modal",(function(e){C.renderLoading(!0),o.postCards(e).then((e=>{const t=I(e);w.addItem(t),C.close(),k.disableButton(),k.reset()})).catch((e=>{console.error("Error adding new card:",e)})).finally((()=>{C.renderLoading(!1)}))}));C.setEventListeners();const y=new i("#confirmation-modal",(function(){y.renderLoading(!0),o.deleteCard(S.getId()).then((()=>{S.removeCard(),y.close()})).catch((e=>{console.error("Error deleting card:",e),hideSavingText(deleteCardSaveButton)})).finally((()=>{y.renderLoading(!1)}))}));y.setEventListeners();let S=null;const g=new class extends r{constructor(e){super({popupSelector:e}),this._popupImage=this._popupElement.querySelector(".modal__preview-image"),this._popupTitle=this._popupElement.querySelector(".modal__preview-title")}open(e){this._popupImage.src=e.link,this._popupTitle.textContent=e.name,this._popupImage.alt=e.name,super.open()}}("#preview-modal-image");function B(e,t){g.open(e,t)}function I(t){const s=new e(t,L,B,(()=>function(e){S=e,y.open()}(s)),q);return s.getView()}function q(e){return e.getLikes()?o.unlikeCard(e.getId()).then((t=>(e.renderLikes(!1),!1))).catch((e=>{throw console.error("Error unliking card:",e),e})):o.likeCard(e.getId()).then((t=>(e.renderLikes(!0),!0))).catch((e=>{throw console.error("Error liking card:",e),e}))}g.setEventListeners();const w=new s({items:[],renderer:e=>{const t=I(e);w.addItem(t)}},".cards__list");o.initialCards().then((e=>{const t=new s({items:e,renderer:e=>{const s=I(e);t.addItem(s)}},".cards__list");t.renderItems()})).catch((e=>{console.error("Error loading initial cards:",e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,